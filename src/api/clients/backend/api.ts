/* tslint:disable */
/* eslint-disable */
/**
 * OatMilk.Backend.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthTokenResponse
 */
export interface AuthTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthTokenResponse
     */
    authToken?: string | null;
}
/**
 * 
 * @export
 * @interface CharacterRequest
 */
export interface CharacterRequest {
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    experience?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    strength?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    dexterity?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    constitution?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    intelligence?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    wisdom?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    charisma?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    armorClass?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    initiative?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    speedInFt?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    currentHitPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    maxHitPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    deathSaveSuccesses?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterRequest
     */
    deathSaveFailures?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    acrobatics?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    animalHandling?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    arcana?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    athletics?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    deception?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    history?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    insight?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    intimidation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    investigation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    medicine?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    nature?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    perception?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    performance?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    persuasion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    religion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    sleightOfHand?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    stealth?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterRequest
     */
    survival?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    personalityTraits?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    ideals?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    bonds?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    flaws?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    backstory?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    alliesAndOrganisations?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterRequest
     */
    appearance?: string | null;
}
/**
 * 
 * @export
 * @interface CharacterResponse
 */
export interface CharacterResponse {
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    createdDateTimeUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    updatedDateTimeUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    experience?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    strength?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    dexterity?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    constitution?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    intelligence?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    wisdom?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    charisma?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    armorClass?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    initiative?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    speedInFt?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    currentHitPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    maxHitPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    deathSaveSuccesses?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponse
     */
    deathSaveFailures?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    acrobatics?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    animalHandling?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    arcana?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    athletics?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    deception?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    history?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    insight?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    intimidation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    investigation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    medicine?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    nature?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    perception?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    performance?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    persuasion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    religion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    sleightOfHand?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    stealth?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponse
     */
    survival?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    personalityTraits?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    ideals?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    bonds?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    flaws?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    backstory?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    alliesAndOrganisations?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CharacterResponse
     */
    appearance?: string | null;
}
/**
 * 
 * @export
 * @interface CharacterResponsePageResponse
 */
export interface CharacterResponsePageResponse {
    /**
     * 
     * @type {number}
     * @memberof CharacterResponsePageResponse
     */
    pageIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponsePageResponse
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponsePageResponse
     */
    totalCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CharacterResponsePageResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponsePageResponse
     */
    hasPreviousPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CharacterResponsePageResponse
     */
    hasNextPage?: boolean;
    /**
     * 
     * @type {Array<CharacterResponse>}
     * @memberof CharacterResponsePageResponse
     */
    items?: Array<CharacterResponse> | null;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    message?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    stackTrace?: string | null;
}
/**
 * 
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    email?: string | null;
}

/**
 * CharacterApi - axios parameter creator
 * @export
 */
export const CharacterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [searchByName] 
         * @param {string} [sortColumnName] 
         * @param {boolean} [sortAscending] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterGet: async (searchByName?: string, sortColumnName?: string, sortAscending?: boolean, pageIndex?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Character`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchByName !== undefined) {
                localVarQueryParameter['SearchByName'] = searchByName;
            }

            if (sortColumnName !== undefined) {
                localVarQueryParameter['SortColumnName'] = sortColumnName;
            }

            if (sortAscending !== undefined) {
                localVarQueryParameter['SortAscending'] = sortAscending;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('characterIdDelete', 'id', id)
            const localVarPath = `/Character/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CharacterRequest} [characterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterIdPut: async (id: string, characterRequest?: CharacterRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('characterIdPut', 'id', id)
            const localVarPath = `/Character/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(characterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterNameGet: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('characterNameGet', 'name', name)
            const localVarPath = `/Character/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CharacterRequest} [characterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterPost: async (characterRequest?: CharacterRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Character`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(characterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CharacterApi - functional programming interface
 * @export
 */
export const CharacterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CharacterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [searchByName] 
         * @param {string} [sortColumnName] 
         * @param {boolean} [sortAscending] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async characterGet(searchByName?: string, sortColumnName?: string, sortAscending?: boolean, pageIndex?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacterResponsePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.characterGet(searchByName, sortColumnName, sortAscending, pageIndex, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async characterIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.characterIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CharacterRequest} [characterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async characterIdPut(id: string, characterRequest?: CharacterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.characterIdPut(id, characterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async characterNameGet(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.characterNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CharacterRequest} [characterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async characterPost(characterRequest?: CharacterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.characterPost(characterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CharacterApi - factory interface
 * @export
 */
export const CharacterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CharacterApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [searchByName] 
         * @param {string} [sortColumnName] 
         * @param {boolean} [sortAscending] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterGet(searchByName?: string, sortColumnName?: string, sortAscending?: boolean, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<CharacterResponsePageResponse> {
            return localVarFp.characterGet(searchByName, sortColumnName, sortAscending, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.characterIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CharacterRequest} [characterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterIdPut(id: string, characterRequest?: CharacterRequest, options?: any): AxiosPromise<CharacterResponse> {
            return localVarFp.characterIdPut(id, characterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterNameGet(name: string, options?: any): AxiosPromise<CharacterResponse> {
            return localVarFp.characterNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CharacterRequest} [characterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characterPost(characterRequest?: CharacterRequest, options?: any): AxiosPromise<CharacterResponse> {
            return localVarFp.characterPost(characterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CharacterApi - object-oriented interface
 * @export
 * @class CharacterApi
 * @extends {BaseAPI}
 */
export class CharacterApi extends BaseAPI {
    /**
     * 
     * @param {string} [searchByName] 
     * @param {string} [sortColumnName] 
     * @param {boolean} [sortAscending] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterApi
     */
    public characterGet(searchByName?: string, sortColumnName?: string, sortAscending?: boolean, pageIndex?: number, pageSize?: number, options?: any) {
        return CharacterApiFp(this.configuration).characterGet(searchByName, sortColumnName, sortAscending, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterApi
     */
    public characterIdDelete(id: string, options?: any) {
        return CharacterApiFp(this.configuration).characterIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CharacterRequest} [characterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterApi
     */
    public characterIdPut(id: string, characterRequest?: CharacterRequest, options?: any) {
        return CharacterApiFp(this.configuration).characterIdPut(id, characterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterApi
     */
    public characterNameGet(name: string, options?: any) {
        return CharacterApiFp(this.configuration).characterNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CharacterRequest} [characterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterApi
     */
    public characterPost(characterRequest?: CharacterRequest, options?: any) {
        return CharacterApiFp(this.configuration).characterPost(characterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PingApi - axios parameter creator
 * @export
 */
export const PingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingAuthGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Ping/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingApi - functional programming interface
 * @export
 */
export const PingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingAuthGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingAuthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PingApi - factory interface
 * @export
 */
export const PingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingAuthGet(options?: any): AxiosPromise<boolean> {
            return localVarFp.pingAuthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): AxiosPromise<boolean> {
            return localVarFp.pingGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PingApi - object-oriented interface
 * @export
 * @class PingApi
 * @extends {BaseAPI}
 */
export class PingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingApi
     */
    public pingAuthGet(options?: any) {
        return PingApiFp(this.configuration).pingAuthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingApi
     */
    public pingGet(options?: any) {
        return PingApiFp(this.configuration).pingGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost: async (userLoginRequest?: UserLoginRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost: async (userRequest?: UserRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLoginPost(userLoginRequest?: UserLoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLoginPost(userLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegisterPost(userRequest?: UserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegisterPost(userRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost(userLoginRequest?: UserLoginRequest, options?: any): AxiosPromise<AuthTokenResponse> {
            return localVarFp.userLoginPost(userLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.userProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost(userRequest?: UserRequest, options?: any): AxiosPromise<AuthTokenResponse> {
            return localVarFp.userRegisterPost(userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserLoginRequest} [userLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLoginPost(userLoginRequest?: UserLoginRequest, options?: any) {
        return UserApiFp(this.configuration).userLoginPost(userLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userProfileGet(options?: any) {
        return UserApiFp(this.configuration).userProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRequest} [userRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userRegisterPost(userRequest?: UserRequest, options?: any) {
        return UserApiFp(this.configuration).userRegisterPost(userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


